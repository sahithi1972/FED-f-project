import { useState } from "react";
import { useLocation, Link } from "react-router-dom";
import { Button } from "../components/ui/button";
import { Skeleton } from "../components/ui/skeleton";
import { RadioGroup, RadioGroupItem } from "../components/ui/radio-group";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../components/ui/select";
import { LayoutGrid, LayoutList, Search, SlidersHorizontal } from "lucide-react";
import { Badge } from "../components/ui/badge";
import { Sheet, SheetContent, SheetTrigger } from "../components/ui/sheet";
import { Label } from "../components/ui/label";
import { Slider } from "../components/ui/slider";
import { Checkbox } from "../components/ui/checkbox";
import { QuickFilters } from "../components/RecipeDiscovery/QuickFilters";
import { cn } from "../lib/utils";
import {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "../components/ui/breadcrumb";
import { AspectRatio } from "../components/ui/aspect-ratio";

type ViewMode = "grid" | "list";
type SortOption = "relevant" | "fastest" | "budget" | "rated" | "newest" | "ingredients";

const sortOptions = [
  { value: "relevant", label: "Most Relevant" },
  { value: "fastest", label: "Fastest First" },
  { value: "budget", label: "Budget-Friendly" },
  { value: "rated", label: "Highest Rated" },
  { value: "newest", label: "Newest First" },
  { value: "ingredients", label: "Using Your Ingredients" },
] as const;

function FiltersPanel() {
  return (
    <div className="h-[calc(100vh-6rem)] overflow-auto">
      <div className="p-6 space-y-6">
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label>Cooking Time</Label>
            <span className="text-sm text-muted-foreground">30 mins</span>
          </div>
          <Slider defaultValue={[30]} max={120} step={5} />
        </div>

        <div className="space-y-4">
          <Label>Budget Range</Label>
          <RadioGroup defaultValue="any">
            <div className="grid gap-2">
              {["Any", "Under ₹50", "₹50-₹100", "₹100-₹200", "₹200+"].map((option) => (
                <div key={option} className="flex items-center space-x-2">
                  <RadioGroupItem value={option.toLowerCase()} id={option} />
                  <Label htmlFor={option}>{option}</Label>
                </div>
              ))}
            </div>
          </RadioGroup>
        </div>

        <div className="space-y-4">
          <Label>Cuisine Types</Label>
          <div className="grid gap-2">
            {["Indian", "Italian", "Chinese", "Mexican", "Thai"].map((cuisine) => (
              <div key={cuisine} className="flex items-center space-x-2">
                <Checkbox id={`cuisine-${cuisine.toLowerCase()}`} />
                <Label htmlFor={`cuisine-${cuisine.toLowerCase()}`}>{cuisine}</Label>
              </div>
            ))}
          </div>
        </div>

        <div className="space-y-4">
          <Label>Dietary Preferences</Label>
          <div className="grid gap-2">
            {["Vegetarian", "Vegan", "Gluten-free", "Dairy-free"].map((pref) => (
              <div key={pref} className="flex items-center space-x-2">
                <Checkbox id={`diet-${pref.toLowerCase()}`} />
                <Label htmlFor={`diet-${pref.toLowerCase()}`}>{pref}</Label>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

export default function RecipesPage() {
  const [viewMode, setViewMode] = useState<ViewMode>("grid");
  const [isFilterOpen, setIsFilterOpen] = useState(false);
  const [sortBy, setSortBy] = useState<SortOption>("relevant");
  const [activeFilters, setActiveFilters] = useState<string[]>([]);

  return (
    <div className="min-h-screen bg-background">
      {/* Breadcrumb */}
      <div className="container px-4 py-4">
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink asChild>
                <Link to="/">Home</Link>
              </BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage>Recipes</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>
      </div>

      {/* Sticky Header */}
      <div className="sticky top-0 z-10 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="container px-4 py-4">
          <div className="flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
            <div className="flex items-center gap-4 flex-1">
              <div className="relative flex-1 max-w-md">
                <Search className="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-muted-foreground" />
                <input
                  type="search"
                  placeholder="Search recipes..."
                  className="w-full rounded-full border bg-transparent px-4 py-2 pl-10"
                />
              </div>
              <Button variant="outline" size="icon" onClick={() => setViewMode(viewMode === "grid" ? "list" : "grid")}>
                {viewMode === "grid" ? <LayoutList className="h-4 w-4" /> : <LayoutGrid className="h-4 w-4" />}
              </Button>
            </div>
            <div className="flex items-center gap-4">
              <Select value={sortBy} onValueChange={(value) => setSortBy(value as SortOption)}>
                <SelectTrigger className="w-[180px]">
                  <SelectValue placeholder="Sort by" />
                </SelectTrigger>
                <SelectContent>
                  {sortOptions.map(option => (
                    <SelectItem key={option.value} value={option.value}>
                      {option.label}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
              <Button>Upload Recipe</Button>
            </div>
          </div>
        </div>
      </div>

      {/* Hero Section */}
      <div className="bg-muted/50 py-8">
        <div className="container px-4">
          <div className="grid gap-6 md:grid-cols-2">
            <div className="rounded-lg bg-gradient-to-r from-primary/10 to-primary/5 p-6">
              <h2 className="mb-2 text-2xl font-semibold">Today's Weather Suggestion</h2>
              <p className="text-muted-foreground">Perfect weather for some comfort food!</p>
            </div>
            <div className="flex flex-wrap items-start gap-2 rounded-lg bg-background p-6">
              <h3 className="mb-2 w-full text-sm font-medium">Cooking with:</h3>
              {["Tomatoes", "Onions", "Garlic"].map(ing => (
                <Badge key={ing} variant="secondary" className="px-3 py-1">
                  {ing} <button className="ml-2 text-xs">×</button>
                </Badge>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Quick Filters */}
      <div className="border-b">
        <div className="container px-4">
          <QuickFilters
            activeFilters={activeFilters}
            onToggle={(id) => {
              setActiveFilters(prev =>
                prev.includes(id)
                  ? prev.filter(f => f !== id)
                  : [...prev, id]
              );
            }}
            onShowAdvanced={() => setIsFilterOpen(true)}
          />
        </div>
      </div>

      {/* Main Content */}
      <div className="container px-4 py-8">
        <div className="flex gap-6">
          {/* Filters Sidebar - Desktop */}
          <aside className="hidden lg:block w-[300px] sticky top-[80px] h-[calc(100vh-80px)]">
            <FiltersPanel />
          </aside>

          {/* Recipes Grid */}
          <main className="flex-1">
            <div className={cn(
              "grid gap-6",
              viewMode === "grid" 
                ? "grid-cols-1 sm:grid-cols-2 lg:grid-cols-3" 
                : "grid-cols-1"
            )}>
              {Array.from({ length: 9 }).map((_, i) => (
                <div key={i} className="rounded-lg overflow-hidden border bg-card">
                  <AspectRatio ratio={16 / 9}>
                    <Skeleton className="h-full w-full" />
                  </AspectRatio>
                  <div className="p-4 space-y-2">
                    <Skeleton className="h-4 w-2/3" />
                    <Skeleton className="h-3 w-1/2" />
                    <div className="flex gap-2 pt-2">
                      <Skeleton className="h-8 w-8 rounded-full" />
                      <Skeleton className="h-8 w-24" />
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </main>
        </div>
      </div>

      {/* Mobile Filters Sheet */}
      <Sheet open={isFilterOpen} onOpenChange={setIsFilterOpen}>
        <SheetContent side="left" className="w-[300px] sm:w-[400px]">
          <FiltersPanel />
        </SheetContent>
      </Sheet>
    </div>
  );
}